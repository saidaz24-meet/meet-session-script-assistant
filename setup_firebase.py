#!/usr/bin/env python3
"""
Firebase Setup Script
This script helps you set up Firebase credentials for the MEET Session Script Assistant.
"""

import os
import json
import base64
from pathlib import Path

def main():
    print("üî• Firebase Setup for MEET Session Script Assistant")
    print("=" * 50)
    
    # Check if .env file exists
    env_file = Path(".env")
    if env_file.exists():
        print("‚úÖ .env file found")
    else:
        print("‚ùå .env file not found. Creating one...")
        env_file.touch()
    
    print("\nüìã Required Firebase Configuration:")
    print("1. Go to https://console.firebase.google.com/")
    print("2. Create a new project or select existing one")
    print("3. Enable Authentication (Email/Password)")
    print("4. Create a Web App")
    print("5. Generate a Service Account Key")
    
    print("\nüîß Configuration Options:")
    print("Choose how you want to provide Firebase credentials:")
    print("1. Service Account JSON file (recommended for development)")
    print("2. Base64 encoded service account JSON")
    print("3. Raw JSON string")
    
    choice = input("\nEnter your choice (1-3): ").strip()
    
    config = {}
    
    # Get Firebase Web App config
    print("\nüåê Firebase Web App Configuration:")
    config["FIREBASE_API_KEY"] = input("Firebase API Key: ").strip()
    config["FIREBASE_AUTH_DOMAIN"] = input("Firebase Auth Domain: ").strip()
    config["FIREBASE_PROJECT_ID_WEB"] = input("Firebase Project ID: ").strip()
    config["FIREBASE_APP_ID"] = input("Firebase App ID: ").strip()
    config["FIREBASE_MESSAGING_SENDER_ID"] = input("Firebase Messaging Sender ID: ").strip()
    config["FIREBASE_PROJECT_ID"] = config["FIREBASE_PROJECT_ID_WEB"]
    
    # Get Service Account credentials based on choice
    if choice == "1":
        print("\nüìÅ Service Account JSON File:")
        file_path = input("Path to service account JSON file: ").strip()
        if os.path.exists(file_path):
            config["GOOGLE_APPLICATION_CREDENTIALS"] = os.path.abspath(file_path)
            print(f"‚úÖ File found: {config['GOOGLE_APPLICATION_CREDENTIALS']}")
        else:
            print(f"‚ùå File not found: {file_path}")
            return
    
    elif choice == "2":
        print("\nüîê Base64 Encoded Service Account JSON:")
        print("1. Open your service account JSON file")
        print("2. Copy the entire content")
        print("3. Encode it to base64 (you can use online tools)")
        b64_json = input("Base64 encoded JSON: ").strip()
        config["FIREBASE_SERVICE_ACCOUNT_B64"] = b64_json
    
    elif choice == "3":
        print("\nüìÑ Raw Service Account JSON:")
        print("Paste your service account JSON content:")
        raw_json = input().strip()
        config["FIREBASE_SERVICE_ACCOUNT_JSON"] = raw_json
    
    else:
        print("‚ùå Invalid choice")
        return
    
    # Other required config
    print("\nüîë Other Configuration:")
    config["SECRET_KEY"] = input("Secret Key (or press Enter for default): ").strip() or "dev-change-me"
    config["GEMINI_API_KEY"] = input("Gemini API Key (optional): ").strip()
    
    # Write to .env file
    print(f"\nüíæ Writing configuration to {env_file}...")
    
    with open(env_file, "w") as f:
        f.write("# Firebase Configuration\n")
        f.write("# Generated by setup_firebase.py\n\n")
        
        for key, value in config.items():
            if value:  # Only write non-empty values
                f.write(f"{key}={value}\n")
    
    print("‚úÖ Configuration saved!")
    print("\nüöÄ Next steps:")
    print("1. Restart your Flask application")
    print("2. Try signing up with a new account")
    print("3. Check the terminal for any remaining errors")
    
    # Test the configuration
    print("\nüß™ Testing configuration...")
    try:
        os.environ.update(config)
        from app.services.firebase import init_firebase
        app, db = init_firebase()
        print("‚úÖ Firebase initialization successful!")
    except Exception as e:
        print(f"‚ùå Firebase initialization failed: {e}")
        print("Please check your credentials and try again.")

if __name__ == "__main__":
    main() 